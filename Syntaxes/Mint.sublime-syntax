%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - mint
scope: source.mint

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: html
    - include: strings
    - include: keywords

  keywords:
    # Keywords are if, else for and while.
    # Note that blackslashes don't need to be escaped within single quoted
    # strings in YAML. When using single quoted strings, only single quotes
    # need to be escaped: this is done by using two single quotes next to each
    # other.
    - match: '\b(global|state|encode|decode|for|module|provider|suite|test|parallel|sequence|case|try|catch|next|with|component|property|fun|style|routes|get|connect|exposing|record|store|use|when|if|else|where|enum|using|const)\b'
      scope: keyword.control.mint
    - match: '\b[A-Z][A-Za-z0-9]*(\\.[A-Z][A-Za-z0-9]*)*\b'
      scope: entity.name.class.mint
    - match: '\b(-)?[0-9]([0-9].)*\b'
      scope: constant.numeric.mint

  strings:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character.
    - match: '"'
      scope: punctuation.definition.string.begin.mint
      push: inside_string

  inside_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.mint
    - match: '\.'
      scope: constant.character.escape.mint
    - match: '"'
      scope: punctuation.definition.string.end.mint
      pop: true

  html:
    - match: '(?i)(?=:(\s*)Html(\s*){)'
      push: scope:text.html.basic
      with_prototype:
        - match: '(?<=>})|^\s*}$'
          pop: true

  comments:
    # Comments begin with a '//' and finish at the end of the line.
    - match: '//'
      scope: punctuation.definition.comment.mint
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.double-slash.mint
        - match: $\n?
          pop: true
    - match: '/\*'
      scope: comment.block.mint.begin
      push:
        - meta_scope: comment.block.mint
        - match: '\*/'
          scope: comment.block.mint.end
          pop: true